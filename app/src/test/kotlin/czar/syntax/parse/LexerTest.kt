package czar.syntax.parse

import czar.diag.Diag
import czar.syntax.S
import czar.syntax.Source
import czar.test.AutoExpect
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.DynamicTest.dynamicTest
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestFactory
import org.junit.jupiter.api.extension.ExtendWith
import java.nio.file.Path

@ExtendWith(AutoExpect::class)
class LexerTest {
    @TestFactory
    internal fun parseOk() = listOf(
        "" to "",
        "\u0009\u000B\u000C\u0020" to "",
        "{}[]():,.=<==== < => >;/|\n\r\n\u0009\u000B\u000C\u0020i dent r#break break" to
                "{ } [ ] ( ) : , . = <= == = < => > ; / | {NL} {NL} i dent break {KW_BREAK}",
        """ "" "_" "\t\b\n\r\'\"\\" """ to "E{} E{_} E{\t\b\n\r'\"\\}",
        """ "\u{0}\u{000000}\u{00d7ff}\u{e000}\u{10fffF}" """ to "E{\u0000\u0000\ud7ff\ue000\udbff\udfff}",
        """ r"" r#"\t\b\n\r\'\"\\"#  """ to """E{} E{\t\b\n\r\'\"\\}""",
        "r##########\"\\t\\b\\n\\r\\'\\\"\\\\\r\n\r\"#########\"##########" to
                "E{\\t\\b\\n\\r\\'\\\"\\\\\n\n\"#########}",
        """ "{}" """ to "S{} {SS} SE{} E{}",
        """ "a\r\n{}" """ to "S{a\r\n} {SS} SE{} E{}",
        """ "a\r\n{}\tb\b" """ to "S{a\r\n} {SS} SE{} E{\tb\b}",
        """ "a\r\n{:}\tb\b" """ to "S{a\r\n} {SS} SE{} E{\tb\b}",
        """ "a\r\n{: "format"\n\r :x-:}\tb\b" """ to "S{a\r\n} {SS} SE{ \"format\"\\n\\r :x-:} E{\tb\b}",
        """ "a{"b{("c": d)${'\n'}:${"\t"}inner${"\r\n"}}d":outer}e" """ to
            "S{a} {SS} S{b} {SS} ( E{c} : d ) {NL} SE{\tinner\r\n} E{d} SE{outer} E{e}",
        """ r"{}" r###"##{###}#"### """ to "E{{}} E{##{###}#}",
        "//\n\r\n" to "{NL} {NL}",
        "/*\n\r\n*/" to "",
        "foo // bar  \n  foo ( /* bar (/* !!! */) )\r\n*/)" to "foo {NL} foo ( )",
        "'a'' ''\t''\b''\\u{10fffF}'" to "C{61} C{20} C{9} C{8} C{10ffff}",
        "\n\r\r\n\n\r" to "{NL} {NL} {NL} {NL} {NL}",
        "\"\n\r\r\n\n\r\"" to "E{\n\n\n\n\n}",
        "_ _foobar" to "{KW_UNDERSCORE} _foobar",
        "0 042 00_00_0_42 -42 340282366920938463463374607431768211455 9999999999999999999999999999999999999999" to
            "0 42 42 - 42 340282366920938463463374607431768211455 9999999999999999999999999999999999999999",
        "0x0 0x_0 0xffff_ffff_ffff_ffff_0fff_ffff_ffff_ffff_FFFFFFFFF" to
            "0 0 23384026197294446690070534885746563250591761432575",
        "0b0 0b_1_0_1_0_1010 0b1111_1111_00000_111_11111111111" to
            "0 170 133709823",
        "0.0 000.000 72.42 0042.72 3.14159 0. 0.abs 0.e+100 23.break 0._pub" to
            "0.0 0.000 72.42 42.72 3.14159 0 . 0 . abs 0 . e + 100 23 . {KW_BREAK} 0 . _pub",
        // https://github.com/ahrvoje/numerics/blob/master/strtod/strtod_tests.toml
        """
            12.34E-56
            -456.
            +123
            nan
            NaN
            NAN
            inf
            Inf
            INF
            -inf
            +inF
            +INF
            1.0
            1e2
            7.e22
            7.0e22
            7.0e+22
            7.0e-22
            -1.13e1
            +1.13e+1
            23e-45
            .13e2
            -.13e-5
            123
            +nan
            infinity
            Infinity
            nan(type-0)
            +nan(catch_22)
            INFINITY
            0.00000001e+8
            -infinity
            123.e-45
            678.
            -nan()
            0.000e+00
            1e-400
            2.4703282292062326e-324
            2.4703282292062327e-324
            2.4703282292062328e-324
            4.9406564584124654e-324
            1e-320
            2.2250738585072009e-308
            2.2250738585072014e-308
            1e-25
            1.0e-23
            1.2345678901234567890
            1.13e1
            1e+19
            1.9e+22
            2.7e22
            3.1e22
            7e22
            1.7976931348623158e+308
            1.7976931348623159e+308
            1e+400
            2.225073858507201136057409796709131975934819546351645648023426109724822222021076945516529523908135087914149158913039621106870086438694594645527657207407820621743379988141063267329253552286881372149012981122451451889849057222307285255133155755015914397476397983411801999323962548289017107081850690630666655994938275772572015763062690663332647565300009245888316433037779791869612049497390377829704905051080609940730262937128958950003583799967207254304360284078895771796150945516748243471030702609144621572289880258182545180325707018860872113128079512233426288368622321503775666622503982534335974568884423900265498198385487948292206894721689831099698365846814022854243330660339850886445804001034933970427567186443383770486037861622771738545623065874679014086723327636718749999999999999999999999999999999999999e-308
            2.22507385850720113605740979670913197593481954635164564802342610972482222202107694551652952390813508791414915891303962110687008643869459464552765720740782062174337998814106326732925355228688137214901298112245145188984905722230728525513315575501591439747639798341180199932396254828901710708185069063066665599493827577257201576306269066333264756530000924588831643303777979186961204949739037782970490505108060994073026293712895895000358379996720725430436028407889577179615094551674824347103070260914462157228988025818254518032570701886087211312807951223342628836862232150377566662250398253433597456888442390026549819838548794829220689472168983109969836584681402285424333066033985088644580400103493397042756718644338377048603786162277173854562306587467901408672332763671875e-308
            0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507385850720138309023271733240406421921598046233183055332741688720443481391819585428315901251102056406733973103581100515243416155346010885601238537771882113077799353200233047961014744258363607192156504694250373420837525080665061665815894872049117996859163964850063590877011830487479978088775374994945158045160505091539985658247081864511353793580499211598108576605199243335211435239014879569960959128889160299264151106346631339366347758651302937176204732563178148566435087212282863764204484681140761391147706280168985324411002416144742161856716615054015428508471675290190316132277889672970737312333408698898317506783884692609277397797285865965494109136909540613646756870239867831529068098461721092462539672851562500000000000000001
            179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497792
            179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497791.9999999999999999999999999999999999999999999999999999999999999999999999
            2.2250738585072012e-308
            8.44291197326099e-309
            35184372088831.999999999999999999999999999999999999
            2.47032822920623272e-324
            1.100000000000000088817841970012523233890533447265626
            .010000000000000000057612911342378542997169
            1.8254370818746402660437411213933955878019332885742187
            6929495644600919.5
            3.7455744005952583e15
            2.2250738585072011e-308
            5.0216813883093451685872615018317116712748411717802652598273e58
            6.631236871469758276785396630275967243399099947355303144249971758736286630139265439618068200788048744105960420552601852889715006376325666595539603330361800519107591783233358492337208057849499360899425128640718856616503093444922854759159988160304439909868291973931426625698663157749836252274523485312442358651207051292453083278116143932569727918709786004497872322193856150225415211997283078496319412124640111777216148110752815101775295719811974338451936095907419622417538473679495148632480391435931767981122396703443803335529756003353209830071832230689201383015598792184172909927924176339315507402234836120730914783168400715462440053817592702766213559042115986763819482654128770595766806872783349146967171293949598850675682115696218943412532098591327667236328125E-316
            3.237883913302901289588352412501532174863037669423108059901297049552301970670676565786835742587799557860615776559838283435514391084153169252689190564396459577394618038928365305143463955100356696665629202017331344031730044369360205258345803431471660032699580731300954848363975548690010751530018881758184174569652173110473696022749934638425380623369774736560008997404060967498028389191878963968575439222206416981462690113342524002724385941651051293552601421155333430225237291523843322331326138431477823591142408800030775170625915670728657003151953664260769822494937951845801530895238439819708403389937873241463484205608000027270531106827387907791444918534771598750162812548862768493201518991668028251730299953143924168545708663913273994694463908672332763671875E-319
            6.953355807847677105972805215521891690222119817145950754416205607980030131549636688806115726399441880065386399864028691275539539414652831584795668560082999889551357784961446896042113198284213107935110217162654939802416034676213829409720583759540476786936413816541621287843248433202369209916612249676005573022703244799714622116542188837770376022371172079559125853382801396219552418839469770514904192657627060319372847562301074140442660237844114174497210955449896389180395827191602886654488182452409583981389442783377001505462015745017848754574668342161759496661766020028752888783387074850773192997102997936619876226688096314989645766000479009083731736585750335262099860150896718774401964796827166283225641992040747894382698751809812609536720628966577351093292236328125E-310
            3.339068557571188581835713701280943911923401916998521771655656997328440314559615318168849149074662609099998113009465566426808170378434065722991659642619467706034884424989741080790766778456332168200464651593995817371782125010668346652995912233993254584461125868481633343674905074271064409763090708017856584019776878812425312008812326260363035474811532236853359905334625575404216060622858633280744301892470300555678734689978476870369853549413277156622170245846166991655321535529623870646888786637528995592800436177901746286272273374471701452991433047257863864601424252024791567368195056077320885329384322332391564645264143400798619665040608077549162173963649264049738362290606875883456826586710961041737908872035803481241600376705491726170293986797332763671875E-319
            8.533e+68
            4.1006e-184
            9.998e+307
            9.9538452227e-280
            6.47660115e-260
            7.4e+47
            5.92e+48
            7.35e+66
            8.32116e+55
            -0.91276999999999997026378650843980722129344940185546876
            -266.240000000000009094947017729282379150390624
            8.255628858767918002472043289952338102302250764062685473021474535926245152950286865234374e-17
            9214843084008499
            0.500000000000000166533453693773481063544750213623046875
            3.518437208883201171875e13
            62.5364939768271845828
            8.10109172351e-10
            1.50000000000000011102230246251565404236316680908203125
            9007199254740991.4999999999999999999999999999999995
            30078505129381147446200
            1777820000000000000001
            0.50000000000000016656055874808561867439493653364479541778564453125
            0.3932922657273
            2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328124999e-324
            2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328125e-324
            2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328125001e-324
            7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984374999e-324
            7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984375e-324
            7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984375001e-324
            8.9884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429647415148697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708031999e+307
            8.9884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429647415148697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708032e+307
            8.9884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429648741514697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708032001e+307
            1.00000005960464477550
            7.7071415537864938e-45
            2183167012312112312312.23538020374420446192e-370
            94393431193180696942841837085033647913224148539854e-358
            99999999999999994487665465554760717039532578546e-47
            10000000000000000000000000000000000000000e-17
            104308485241983990666713401708072175773165034278685682646111762292409330928739751702404658197872319129036519947435319418387839758990478549477777586673075945844895981012024387992135617064532141489278815239849108105951619997829153633535314849999674266169258928940692239684771590065027025835804863585454872499320500023126142553932654370362024104462255244034053203998964360882487378334860197725139151265590832887433736189468858614521708567646743455601905935595381852723723645799866672558576993978025033590728687206296379801363024094048327273913079612469982585674824156000783167963081616214710691759864332339239688734656548790656486646106983450809073750535624894296242072010195710276073042036425579852459556183541199012652571123898996574563824424330960027873516082763671875e-1075
            10.900000000000000012345678912345678912345
        """.replace(Regex("\\s+"), " ") to
        """
            1.234E-55
            - 456 .
            + 123
            nan
            NaN
            NAN
            inf
            Inf
            INF 
            - inf 
            + inF 
            + INF
            1.0
            1E+2
            7 . 
            e22
            7.0E+22
            7.0E+22
            7.0E-22
            - 11.3
            + 11.3
            2.3E-44
            . 1.3E+3
            - . 0.00013
            123
            + nan
            infinity
            Infinity
            nan ( {KW_TYPE} - 0 )
            + nan ( catch_22 )
            INFINITY
            1.0
            - infinity
            123 . e - 45
            678 .
            - nan ( )
            0.000
            1E-400
            2.4703282292062326E-324
            2.4703282292062327E-324
            2.4703282292062328E-324
            4.9406564584124654E-324
            1E-320
            2.2250738585072009E-308
            2.2250738585072014E-308
            1E-25
            1.0E-23
            1.2345678901234567890
            11.3
            1E+19
            1.9E+22
            2.7E+22
            3.1E+22
            7E+22
            1.7976931348623158E+308
            1.7976931348623159E+308
            1E+400
            2.225073858507201136057409796709131975934819546351645648023426109724822222021076945516529523908135087914149158913039621106870086438694594645527657207407820621743379988141063267329253552286881372149012981122451451889849057222307285255133155755015914397476397983411801999323962548289017107081850690630666655994938275772572015763062690663332647565300009245888316433037779791869612049497390377829704905051080609940730262937128958950003583799967207254304360284078895771796150945516748243471030702609144621572289880258182545180325707018860872113128079512233426288368622321503775666622503982534335974568884423900265498198385487948292206894721689831099698365846814022854243330660339850886445804001034933970427567186443383770486037861622771738545623065874679014086723327636718749999999999999999999999999999999999999E-308
            2.22507385850720113605740979670913197593481954635164564802342610972482222202107694551652952390813508791414915891303962110687008643869459464552765720740782062174337998814106326732925355228688137214901298112245145188984905722230728525513315575501591439747639798341180199932396254828901710708185069063066665599493827577257201576306269066333264756530000924588831643303777979186961204949739037782970490505108060994073026293712895895000358379996720725430436028407889577179615094551674824347103070260914462157228988025818254518032570701886087211312807951223342628836862232150377566662250398253433597456888442390026549819838548794829220689472168983109969836584681402285424333066033985088644580400103493397042756718644338377048603786162277173854562306587467901408672332763671875E-308
            2.22507385850720138309023271733240406421921598046233183055332741688720443481391819585428315901251102056406733973103581100515243416155346010885601238537771882113077799353200233047961014744258363607192156504694250373420837525080665061665815894872049117996859163964850063590877011830487479978088775374994945158045160505091539985658247081864511353793580499211598108576605199243335211435239014879569960959128889160299264151106346631339366347758651302937176204732563178148566435087212282863764204484681140761391147706280168985324411002416144742161856716615054015428508471675290190316132277889672970737312333408698898317506783884692609277397797285865965494109136909540613646756870239867831529068098461721092462539672851562500000000000000001E-308
            179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497792
            179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497791.9999999999999999999999999999999999999999999999999999999999999999999999
            2.2250738585072012E-308
            8.44291197326099E-309
            35184372088831.999999999999999999999999999999999999
            2.47032822920623272E-324
            1.100000000000000088817841970012523233890533447265626
            . 10000000000000000057612911342378542997169
            1.8254370818746402660437411213933955878019332885742187
            6929495644600919.5
            3745574400595258.3
            2.2250738585072011E-308
            50216813883093451685872615018317116712748411717802652598273.0
            6.631236871469758276785396630275967243399099947355303144249971758736286630139265439618068200788048744105960420552601852889715006376325666595539603330361800519107591783233358492337208057849499360899425128640718856616503093444922854759159988160304439909868291973931426625698663157749836252274523485312442358651207051292453083278116143932569727918709786004497872322193856150225415211997283078496319412124640111777216148110752815101775295719811974338451936095907419622417538473679495148632480391435931767981122396703443803335529756003353209830071832230689201383015598792184172909927924176339315507402234836120730914783168400715462440053817592702766213559042115986763819482654128770595766806872783349146967171293949598850675682115696218943412532098591327667236328125E-316
            3.237883913302901289588352412501532174863037669423108059901297049552301970670676565786835742587799557860615776559838283435514391084153169252689190564396459577394618038928365305143463955100356696665629202017331344031730044369360205258345803431471660032699580731300954848363975548690010751530018881758184174569652173110473696022749934638425380623369774736560008997404060967498028389191878963968575439222206416981462690113342524002724385941651051293552601421155333430225237291523843322331326138431477823591142408800030775170625915670728657003151953664260769822494937951845801530895238439819708403389937873241463484205608000027270531106827387907791444918534771598750162812548862768493201518991668028251730299953143924168545708663913273994694463908672332763671875E-319
            6.953355807847677105972805215521891690222119817145950754416205607980030131549636688806115726399441880065386399864028691275539539414652831584795668560082999889551357784961446896042113198284213107935110217162654939802416034676213829409720583759540476786936413816541621287843248433202369209916612249676005573022703244799714622116542188837770376022371172079559125853382801396219552418839469770514904192657627060319372847562301074140442660237844114174497210955449896389180395827191602886654488182452409583981389442783377001505462015745017848754574668342161759496661766020028752888783387074850773192997102997936619876226688096314989645766000479009083731736585750335262099860150896718774401964796827166283225641992040747894382698751809812609536720628966577351093292236328125E-310
            3.339068557571188581835713701280943911923401916998521771655656997328440314559615318168849149074662609099998113009465566426808170378434065722991659642619467706034884424989741080790766778456332168200464651593995817371782125010668346652995912233993254584461125868481633343674905074271064409763090708017856584019776878812425312008812326260363035474811532236853359905334625575404216060622858633280744301892470300555678734689978476870369853549413277156622170245846166991655321535529623870646888786637528995592800436177901746286272273374471701452991433047257863864601424252024791567368195056077320885329384322332391564645264143400798619665040608077549162173963649264049738362290606875883456826586710961041737908872035803481241600376705491726170293986797332763671875E-319
            8.533E+68
            4.1006E-184
            9.998E+307
            9.9538452227E-280
            6.47660115E-260
            7.4E+47
            5.92E+48
            7.35E+66
            8.32116E+55
            - 0.91276999999999997026378650843980722129344940185546876
            - 266.240000000000009094947017729282379150390624
            8.255628858767918002472043289952338102302250764062685473021474535926245152950286865234374E-17
            9214843084008499
            0.500000000000000166533453693773481063544750213623046875
            35184372088832.01171875
            62.5364939768271845828
            8.10109172351E-10
            1.50000000000000011102230246251565404236316680908203125
            9007199254740991.4999999999999999999999999999999995
            30078505129381147446200
            1777820000000000000001
            0.50000000000000016656055874808561867439493653364479541778564453125
            0.3932922657273
            2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328124999E-324
            2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328125E-324
            2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328125001E-324
            7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984374999E-324
            7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984375E-324
            7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984375001E-324
            89884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429647415148697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708031.999
            89884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429647415148697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708032.0
            89884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429648741514697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708032.001
            1.00000005960464477550
            7.7071415537864938E-45
            2.18316701231211231231223538020374420446192E-349
            9.4393431193180696942841837085033647913224148539854E-309
            0.99999999999999994487665465554760717039532578546
            100000000000000000000000.00000000000000000
            1.04308485241983990666713401708072175773165034278685682646111762292409330928739751702404658197872319129036519947435319418387839758990478549477777586673075945844895981012024387992135617064532141489278815239849108105951619997829153633535314849999674266169258928940692239684771590065027025835804863585454872499320500023126142553932654370362024104462255244034053203998964360882487378334860197725139151265590832887433736189468858614521708567646743455601905935595381852723723645799866672558576993978025033590728687206296379801363024094048327273913079612469982585674824156000783167963081616214710691759864332339239688734656548790656486646106983450809073750535624894296242072010195710276073042036425579852459556183541199012652571123898996574563824424330960027873516082763671875E-308
            10.900000000000000012345678912345678912345
        """.replace(Regex("\\s+"), " ").trim()
        ).mapIndexed { i, (inp, exp) ->
            dynamicTest("$i") {
                parseOk(i, inp, exp)
            }
        }

    @TestFactory
    internal fun parseFail() = listOf(
        null,
        null,
        "\uD83E\uDD70",
        "\"",
        "\n\"str\ning",
        "\"\r",
        "foo/*",
        "foo/*\nbar",
        "foo/*/*\nbar*/",
        """ "{:" """,
        """ "\a\ \z\u\u{\u{ag}\u{d800}\u{dfff}\u{110000}\u{fffffffffffffffffffff}" """,
        "'",
        "'foobar",
        "'''abcd''\n''foo\nbar\r\n'",
        "r#_ r#self r#Self",
        "0z123",
        "123foobar",
        "0x123barfoo",
        "0b111qux",
        "1_ 1__2",
        "1_.0_ 1_E_10 1E_10 1E_+_10",
        ).mapIndexed { i, inp ->
            if (inp == null) {
                null
            } else {
                dynamicTest("$inp") {
                    parseFail(i.toString(), inp)
                }
            }
        }.filterNotNull()

    @Test
    internal fun tokens() {
        for (tok in Token.values()) {
            val inp = when (tok) {
                Token.CHAR_LIT -> "'a'"
                Token.EOF -> ""
                Token.FLOAT_LIT -> "0.0"
                Token.IDENT -> "main"
                Token.INT_LIT -> "0"
                Token.NL -> "\n"
                Token.RAW_STRING_LIT_END,
                Token.STRING_LIT,
                Token.STRING_LIT_END,
                Token.STRING_LIT_SUBST_END,
                Token.STRING_LIT_SUBST_START,
                 -> null
                else -> tok.toString()
            }
            if (inp != null) {
                val diag = Diag()
                val lex = Lexer(Source(inp, Path.of("test")), diag)
                assertEquals(tok, lex.next().value)
                assertEquals(Token.EOF, lex.next().value)
                assertTrue(diag.reports.isEmpty()) { diag.toString() }
            }
        }
    }

    private fun parseOk(@Suppress("UNUSED_PARAMETER") id: Int, inp: String, exp: String) {
        val diag = Diag()
        val lex = Lexer(Source(inp, Path.of("test")), diag)
        var first = true
        val act = StringBuilder()
        while (true) {
            val tok = try {
                lex.next()
            } catch (_: ParseException) {
                break
            }
            val s = toString(lex, tok) ?: break
            if (first) {
                first = false
            } else {
                act.append(' ')
            }
            act.append(s)
        }
        assertTrue(diag.reports.isEmpty()) { diag.toString() }
        assertEquals(exp, act.toString())
    }

    private fun toString(lexer: Lexer, tok: S<Token>): String? {
        return when (tok.value) {
            Token.EOF -> null

            Token.IDENT -> "${lexer.ident(tok.span)}"

            Token.STRING_LIT -> "S{${lexer.stringLit(tok.span).joinToString("")}}"
            Token.STRING_LIT_END, Token.RAW_STRING_LIT_END -> "E{${lexer.stringLitEnd(tok).joinToString("")}}"
            Token.STRING_LIT_SUBST_START -> "{SS}"
            Token.STRING_LIT_SUBST_END -> "SE{${lexer.stringLitSubstEnd(tok.span)}}"
            Token.NL -> "{NL}"
            Token.CHAR_LIT -> "C{${lexer.charLit(tok.span).toString(16)}}"
            Token.INT_LIT -> "${lexer.intLit(tok.span)}"
            Token.FLOAT_LIT -> {
                var s = lexer.floatLit(tok.span).toString()
                if (!s.contains('.') && !s.contains('E')) {
                    s += ".0"
                }
                s
            }

            Token.KW_AS,
            Token.KW_AS_BANG,
            Token.KW_AS_PERCENT,
            Token.KW_AS_QUEST,
            Token.KW_BREAK,
            Token.KW_CONST,
            Token.KW_CONTINUE,
            Token.KW_ELSE,
            Token.KW_ENUM,
            Token.KW_FALSE,
            Token.KW_FN,
            Token.KW_FOR,
            Token.KW_IF,
            Token.KW_IMPL,
            Token.KW_IN,
            Token.KW_IS,
            Token.KW_LOOP,
            Token.KW_MATCH,
            Token.KW_MODULE,
            Token.KW_MUT,
            Token.KW_NOT,
            Token.KW_PACKAGE,
            Token.KW_PUB,
            Token.KW_RET,
            Token.KW_SELF_LOWER,
            Token.KW_SELF_UPPER,
            Token.KW_STATIC,
            Token.KW_STRUCT,
            Token.KW_SUPER,
            Token.KW_TRAIT,
            Token.KW_TRUE,
            Token.KW_TYPE,
            Token.KW_UNDERSCORE,
            Token.KW_UNSAFE,
            Token.KW_USE,
            Token.KW_WHERE,
            Token.KW_WHILE,
            -> "{${tok.value.name}}"

            Token.BRACE_CLOSE,
            Token.BRACE_OPEN,
            Token.BRACKET_CLOSE,
            Token.BRACKET_OPEN,
            Token.COLON,
            Token.COMMA,
            Token.DOT,
            Token.EQ,
            Token.EQ_EQ,
            Token.EQ_GT,
            Token.GT,
            Token.GT_EQ,
            Token.LT,
            Token.LT_EQ,
            Token.PAREN_CLOSE,
            Token.PAREN_OPEN,
            Token.PIPE,
            Token.SEMI,
            Token.SLASH,
            Token.AMP,
            Token.AMP2,
            Token.AMP_EQ,
            Token.BANG,
            Token.BANG_EQ,
            Token.COLON2,
            Token.DASH,
            Token.DASH_EQ,
            Token.DASH_GT,
            Token.DOT2_EQ,
            Token.DOT2,
            Token.DOT3,
            Token.GT2_EQ,
            Token.GT2,
            Token.HAT,
            Token.HAT_EQ,
            Token.LT2_EQ,
            Token.LT2,
            Token.PERCENT,
            Token.PERCENT_EQ,
            Token.PIPE2,
            Token.PIPE_EQ,
            Token.PLUS,
            Token.PLUS_EQ,
            Token.QUEST,
            Token.SLASH_EQ,
            Token.STAR,
            Token.STAR_EQ,
            -> tok.value.toString()
        }
    }

    private fun parseFail(id: String, inp: String) {
        val diag = Diag()
        val lex = Lexer(Source(inp, Path.of("test")), diag)
        try {
            while (true) {
                val tok = lex.next()
                if (tok.value == Token.EOF) {
                    break
                }
                toString(lex, tok)
            }
        } catch (_: ParseException) {
        }
        assertFalse(diag.reports.isEmpty())
        AutoExpect.verify(id, diag.toString())
    }
}